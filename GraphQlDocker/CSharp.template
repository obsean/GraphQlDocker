{{!# Main}}
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Linq;

#line hidden
namespace GraphQlDocker
{
    public interface I{{ClassName}} : IGraphQLClient
	{
        {{#each Operations}}
			{{> InterfaceOperation}}


		{{/each}}
    }

	public sealed class {{ClassName}} : I{{ClassName}}
	{
		private static JsonSerializerSettings jsonSettings = new JsonSerializerSettings()
        {
            Converters =
            {
                new CustomJsonDateConvertor(),
                new Newtonsoft.Json.Converters.StringEnumConverter(camelCaseText: false)
            }
        };

        private HttpClient client;
		public {{pascalCase ClassName}}(HttpClient client)
		{
			this.client = client;
		}
		
		internal sealed class GraphQLRequest
        {
			public string query {get;set;}
			public Dictionary<string, object> variables {get;set;}
		}

        internal sealed class GraphQLResponseErrors<T>
        {
            public IEnumerable<GraphQLResponseError> errors { get; set; }
        }
		
        internal sealed class GraphQLResponseData<T>
        {
            public T data { get; set; }
        }

        internal sealed class GraphQLResponseError
        {
            public string Message { get; set; }
        }

		{{#each Operations}}
			{{> Operation}}


		{{/each}}
	
    public sealed class {{ClassName}}Exception : GraphQLException
    {
        public {{ClassName}}Exception(HttpResponseMessage response)
            : base(response)
        {
        }

        public {{ClassName}}Exception(IEnumerable<string> errorMessages, HttpResponseMessage response)
            : base(errorMessages, response)
        {
        }
    }

	{{#each Types}}
		{{> Type}}


	{{/each}}

	{{#each Enums}}
		{{> Enum}}


	{{/each}}
	}
}

{{!# Type}}
	public sealed class {{pascalCase Name}} {{#each~ Interfaces}}{{~#if @first}}: {{else}}, {{/if~}}I{{pascalCase .}}{{~/each}}
	{
		{{#each Fields}}
        [JsonProperty("{{Name}}")]       
		public {{> TypeReference Type}} {{pascalCase Name}} { get; set; }
		{{/each}}
	}


{{!# Interface}}
	public interface I{{pascalCase Name}}
	{
		{{#each Fields}}
		{{> TypeReference Type}} {{pascalCase Name}} { get; set; }
		{{/each}}
	}
	
{{!# Enum}}
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	public enum {{pascalCase Name}}
	{
		{{#each Values}}
		{{.}},
		{{/each}}
	}
{{!# InterfaceOperation}}
		Task<{{> TypeReference ResultType}}> {{pascalCase Name}}Async({{> ArgumentList Arguments}});

{{!# Operation}}
		public async Task<{{> TypeReference ResultType}}> {{pascalCase Name}}Async({{> ArgumentList Arguments}})
		{
			var response = await this.client.PostAsync("", new StringContent(JsonConvert.SerializeObject(new GraphQLRequest()
            {
                query = @"{{replace Query '"' '""'}}",
                variables = new Dictionary<string, object> {
                   {{#each Arguments}}
					{ @"{{replace Name '"' '""'}}", {{camelCase Name}} },
				   {{/each}}
                }
            }, jsonSettings)));

			if (!response.IsSuccessStatusCode)
            {
                throw new {{../ClassName}}Exception(response);
            }

            var jsonResult = await response.Content.ReadAsStringAsync();

            var errorsResult = JsonConvert.DeserializeObject<GraphQLResponseErrors<{{> TypeReference ResultType}}>>(jsonResult, jsonSettings);

            if (errorsResult.errors?.Any() == true) {
                throw new {{../ClassName}}Exception(errorsResult.errors.Select(x => x.Message), response);
            }

			var result = JsonConvert.DeserializeObject<GraphQLResponseData<{{> TypeReference ResultType}}>>(jsonResult, jsonSettings);

            if (result == null)
            {
                throw new {{../ClassName}}Exception(response);
            }

            return result.data;
		}
		
{{!# ArgumentList}}
	{{~#each~ .}}
		{{~#unless @first}}, {{/unless~}}{{> TypeReference Type}} {{camelCase Name}}
	{{~/each~}}
	
{{!# TypeReference}}
	{{~#if IsScaler}}{{ > (concat 'TypeReference_' TypeName) }}
    {{~else~}}
    {{~#if IsEnum~}}
    {{> RenderTypeReference name=TypeName  prefix=true fixCase=true isValueType=true isCollection=IsCollection nullable=CanValueBeNull }}
    {{~else~}}
    {{> RenderTypeReference name=TypeName  prefix=true fixCase=true isValueType=false isCollection=IsCollection nullable=CanValueBeNull }}
    {{~/if~}}
    {{~/if~}}

{{!# TypeReference_Int}}
	{{~> RenderTypeReference name='int' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}
	
{{!# TypeReference_String}}
	{{~> RenderTypeReference name='string' isValueType=false fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}

{{!# TypeReference_ID}}
	{{~> RenderTypeReference name='string' isValueType=false fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}

{{!# TypeReference_Float}}
	{{~> RenderTypeReference name='decimal' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}

{{!# TypeReference_Boolean}}
	{{~> RenderTypeReference name='bool' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}
	
{{!# TypeReference_DateTime}}
	{{~> RenderTypeReference name='DateTime' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}

{{!# TypeReference_Date}}
	{{~> RenderTypeReference name='DateTime' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}
	
{{!# TypeReference_GUID}}
	{{~> RenderTypeReference name='Guid' isValueType=true fixCase=false isCollection=IsCollection nullable=CanValueBeNull prefix=false }}
	
{{!# RenderTypeReference}}
	{{~#if isCollection }}IEnumerable<{{/if~}}
    {{~#if prefix }}{{@root.ClassName}}.{{/if~}}
	{{#if fixCase}}{{pascalCase name}}{{/if}}{{#unless fixCase}}{{name}}{{/unless}}
	{{~#if isValueType}}{{#if nullable}}?{{/if}}{{/if~}}
	{{~#if isCollection}}>{{/if}}
